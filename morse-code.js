// Generated by CoffeeScript 1.6.3
(function() {
  var dicts, exercise, genDicts, onReady, randDict, use;

  if (typeof isNodeJs === "undefined" || typeof runTest === "undefined") {
    (function() {
      var root;
      root = typeof global === "undefined" ? window : global;
      if (typeof isNodeJs === "undefined") {
        root.isNodeJs = typeof window === "undefined";
      }
      if (typeof isPhoneGap === "undefined") {
        root.isPhoneGap = typeof document.ondeviceready !== "undefined";
      }
      if (typeof runTest === "undefined") {
        return root.runTest = true;
      }
    })();
  }

  use = isNodeJs ? (function(module) {
    return require(module);
  }) : (function(module) {
    return window[module];
  });

  onReady = function(fn) {
    if (isNodeJs) {
      return process.nextTick(fn);
    } else {
      if (document.readystate !== "complete") {
        return fn();
      } else {
        return setTimeout((function() {
          return onReady(fn);
        }), 17);
      }
    }
  };

  uu.pick = function(arr) {
    return arr[Math.random() * arr.length | 0];
  };

  ({
    alphabet: {
      a: ".-",
      b: "-...",
      c: "-.-.",
      d: "-..",
      e: ".",
      f: "..-.",
      g: "--.",
      h: "....",
      j: "--.",
      k: "-.-",
      l: ".-..",
      m: "--",
      n: "-.",
      o: "---",
      p: ".--.",
      q: "--.-",
      r: ".-.",
      s: "...",
      t: "-",
      u: "..-",
      v: "...-",
      w: ".--",
      x: "-..-",
      y: "-.--",
      z: "--..",
      "0": "-----",
      "1": ".----",
      "2": "..---",
      "3": "...--",
      "4": "....-",
      "5": ".....",
      "6": "-....",
      "7": "--...",
      "8": "---..",
      "9": "----.",
      ".": ".-.-.-",
      ",": "--..--",
      "?": "..--..",
      "'": ".----.",
      "!": ".-.---",
      "/": "-..-.",
      "(": "-.--.",
      ")": "-.--.-",
      "&": ".-...",
      ":": "---...",
      ";": "-.-.-.",
      "=": "-...-",
      "+": ".-.-.",
      "-": "-....-",
      "_": "..--.-",
      '"': ".-..-.",
      "$": "...-..-",
      "@": ".--.-.",
      "æäą": ".-.-",
      "åà": ".--.-",
      "çĉć": "-.-..",
      "šĥ": "----",
      "ð": "..--.",
      "ś": "...-...",
      "èł": ".-..-",
      "éđę": "..-..",
      "ĝ": "--.-.",
      "ĵ": ".---.",
      "ź": "--..-.",
      "ñń": "--.--",
      "øöó": "---.",
      "ŝ": "...-.",
      "þ": ".--..",
      "üŭ": "..--",
      "ż": "--..-"
    }
  });

  dicts = {};

  randDict = function(symbs) {
    var i, j, word, _i, _j, _ref, _results;
    _results = [];
    for (i = _i = 0; _i <= 999; i = ++_i) {
      word = "";
      for (j = _j = 0, _ref = Math.random() * 4 + 1; 0 <= _ref ? _j <= _ref : _j >= _ref; j = 0 <= _ref ? ++_j : --_j) {
        word += uu.pick(symbs);
      }
      _results.push(word);
    }
    return _results;
  };

  genDicts = function(cb) {
    var genCallback, handleCreatedWords, lang, readDict, _i, _len, _ref;
    readDict = function(lang, fn) {
      return uu.ajax("" + lang + "words.txt", void 0, function(err, result) {
        if (err) {
          throw err;
        }
        return fn(result.slice(0, -1).toLocaleLowerCase().split("\n").map(function(a) {
          return a.trim();
        }));
      });
    };
    handleCreatedWords = function() {
      var dict, freq, lang, letter, letters, word, _i, _j, _len, _len1, _ref;
      for (lang in dicts) {
        dict = dicts[lang];
        freq = {};
        _ref = dict.words;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          word = _ref[_i];
          for (_j = 0, _len1 = word.length; _j < _len1; _j++) {
            letter = word[_j];
            if (freq[letter] == null) {
              freq[letter] = 0;
            }
            ++freq[letter];
          }
        }
        letters = Object.keys(freq);
        letters.sort(function(a, b) {
          return freq[b] - freq[a];
        });
        dict.letters = letters;
      }
      return typeof cb === "function" ? cb(dicts) : void 0;
    };
    genCallback = uu.whenDone(handleCreatedWords);
    _ref = ["en", "da"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      lang = _ref[_i];
      dicts[lang] = {};
      readDict(lang, (function(lang, cb) {
        return function(words) {
          dicts[lang].words = words;
          return cb();
        };
      })(lang, genCallback()));
    }
    dicts.num = {
      words: randDict("0123456789")
    };
    return dicts.symb = {
      words: randDict(".,?'!/()&:;=+-_\"$@")
    };
  };

  exercise = function(lang, n) {
    var exerciseList, letterNo;
    exerciseList = function(lang, n, letterNo) {
      var letter, letterDict, letters, reqLetter, _i, _len;
      letters = dicts[lang].letters.slice(0, n);
      letterDict = {};
      for (_i = 0, _len = letters.length; _i < _len; _i++) {
        letter = letters[_i];
        letterDict[letter] = true;
      }
      reqLetter = letters[letterNo];
      return dicts[lang].words.filter(function(word) {
        var hasReqLetter, _j, _len1;
        hasReqLetter = false;
        for (_j = 0, _len1 = word.length; _j < _len1; _j++) {
          letter = word[_j];
          if (!letterDict[letter]) {
            return false;
          }
          if (letter === reqLetter) {
            hasReqLetter = true;
          }
        }
        return hasReqLetter;
      });
    };
    letterNo = n;
    while (letterNo >= Math.min(n, dicts[lang].letters.length)) {
      letterNo = (n - Math.pow(Math.random(), 4) * n) | 0;
    }
    return uu.pick(exerciseList(lang, n, letterNo));
  };

  onReady(function() {
    return genDicts(function(dicts) {
      var i, j, lang, _i, _results;
      console.log(dicts);
      lang = "da";
      _results = [];
      for (i = _i = 2; _i <= 30; i = ++_i) {
        _results.push(console.log(dicts[lang].letters[i - 1], ((function() {
          var _j, _results1;
          _results1 = [];
          for (j = _j = 1; _j <= 20; j = ++_j) {
            _results1.push(exercise(lang, i));
          }
          return _results1;
        })()).join(" ")));
      }
      return _results;
    });
  });

}).call(this);
