// Generated by CoffeeScript 1.6.3
(function() {
  var ajaxLegacy, alphabet, exercise, genDicts, onReady, parseMorse, prev, registerTouch, renderMorse, timings, touching, use,
    __slice = [].slice;

  if (typeof isNodeJs === "undefined" || typeof runTest === "undefined") {
    (function() {
      var root;
      root = typeof global === "undefined" ? window : global;
      if (typeof isNodeJs === "undefined") {
        root.isNodeJs = typeof window === "undefined";
      }
      if (typeof isPhoneGap === "undefined") {
        root.isPhoneGap = typeof document.ondeviceready !== "undefined";
      }
      if (typeof runTest === "undefined") {
        return root.runTest = true;
      }
    })();
  }

  use = isNodeJs ? (function(module) {
    return require(module);
  }) : (function(module) {
    return window[module];
  });

  onReady = function(fn) {
    if (isNodeJs) {
      return process.nextTick(fn);
    } else {
      if (document.readystate !== "complete") {
        return fn();
      } else {
        return setTimeout((function() {
          return onReady(fn);
        }), 17);
      }
    }
  };

  uu.pick = function(arr) {
    return arr[Math.random() * arr.length | 0];
  };

  uu.domListen = function(elem, event, fn) {
    if (elem.addEventListener) {
      return elem.addEventListener(event, fn, false);
    } else {
      return elem.attachEvent("on" + event, fn);
    }
  };

  uu.onComplete = function(fn) {
    if (document.readystate !== "complete") {
      return fn();
    } else {
      return setTimeout((function() {
        return uu.onComplete(fn);
      }), 17);
    }
  };

  ajaxLegacy = false;

  (function() {
    var logData, logId, logSyncing, logUrl, logsBeforeSync, syncDelay;
    logId = Math.random();
    logUrl = "https://ssl.solsort.com/api/log";
    logData = [];
    logSyncing = false;
    logsBeforeSync = 200;
    syncDelay = 400;
    uu.syncLog = function() {
      var e, logContent;
      if (!logSyncing) {
        try {
          logContent = JSON.stringify(logData);
        } catch (_error) {
          e = _error;
          logContent = "Error stringifying log";
        }
        logSyncing = logData;
        logData = [];
        return ajax(logUrl, logContent, function(err, result) {
          setTimeout((function() {
            return logSyncing = false;
          }), syncDelay);
          if (err) {
            log("logsync error", err);
            return logData = logSyncing.concat(logData);
          } else {
            logData.push([+(new Date()), "log sync'ed", logId, logData.length]);
            if ((ajaxLegacy || runTest) && logData.length > 1) {
              return syncLog();
            }
          }
        });
      }
    };
    uu.log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      logData.push([+(new Date())].concat(__slice.call(args)));
      if (logData.length > logsBeforeSync || ajaxLegacy || runTest) {
        uu.nextTick(syncLog);
      }
      return args;
    };
    uu.onComplete(function() {
      uu.domListen(window, "error", function(err) {
        return uu.log("window.onerror ", String(err));
      });
      return uu.domListen(window, "beforeunload", function() {
        var e;
        uu.log("window.beforeunload");
        try {
          ajax(logUrl, JSON.stringify(logData));
        } catch (_error) {
          e = _error;
          void 0;
        }
        return void 0;
      });
    });
    return uu.log("starting", logId, window.performance);
  })();

  exercise = void 0;

  genDicts = void 0;

  alphabet = void 0;

  ({
    alphabet: {
      a: ".-",
      b: "-...",
      c: "-.-.",
      d: "-..",
      e: ".",
      f: "..-.",
      g: "--.",
      h: "....",
      j: "--.",
      k: "-.-",
      l: ".-..",
      m: "--",
      n: "-.",
      o: "---",
      p: ".--.",
      q: "--.-",
      r: ".-.",
      s: "...",
      t: "-",
      u: "..-",
      v: "...-",
      w: ".--",
      x: "-..-",
      y: "-.--",
      z: "--..",
      "0": "-----",
      "1": ".----",
      "2": "..---",
      "3": "...--",
      "4": "....-",
      "5": ".....",
      "6": "-....",
      "7": "--...",
      "8": "---..",
      "9": "----.",
      ".": ".-.-.-",
      ",": "--..--",
      "?": "..--..",
      "'": ".----.",
      "!": ".-.---",
      "/": "-..-.",
      "(": "-.--.",
      ")": "-.--.-",
      "&": ".-...",
      ":": "---...",
      ";": "-.-.-.",
      "=": "-...-",
      "+": ".-.-.",
      "-": "-....-",
      "_": "..--.-",
      '"': ".-..-.",
      "$": "...-..-",
      "@": ".--.-.",
      "æ": ".-.-",
      "ä": ".-.-",
      "ą": ".-.-",
      "à": ".--.-",
      "à": ".--.-",
      "ç": "-.-..",
      "ĉ": "-.-..",
      "ć": "-.-..",
      "š": "----",
      "ĥ": "----",
      "ð": "..--.",
      "ś": "...-...",
      "ł": ".-..-",
      "è": ".-..-",
      "é": "..-..",
      "đ": "..-..",
      "ę": "..-..",
      "ĝ": "--.-.",
      "ĵ": ".---.",
      "ź": "--..-.",
      "ñ": "--.--",
      "ń": "--.--",
      "ø": "---.",
      "ö": "---.",
      "ó": "---.",
      "ŝ": "...-.",
      "þ": ".--..",
      "ü": "..--",
      "ŭ": "..--",
      "ż": "--..-"
    }
  });

  (function() {
    var dicts, randDict;
    dicts = {};
    randDict = function(symbs) {
      var i, j, word, _i, _j, _ref, _results;
      _results = [];
      for (i = _i = 0; _i <= 999; i = ++_i) {
        word = "";
        for (j = _j = 0, _ref = Math.random() * 4 + 1; 0 <= _ref ? _j <= _ref : _j >= _ref; j = 0 <= _ref ? ++_j : --_j) {
          word += uu.pick(symbs);
        }
        _results.push(word);
      }
      return _results;
    };
    genDicts = function(cb) {
      var genCallback, handleCreatedWords, lang, readDict, _i, _len, _ref;
      readDict = function(lang, fn) {
        return uu.ajax("" + lang + "words.txt", void 0, function(err, result) {
          if (err) {
            throw err;
          }
          return fn(result.slice(0, -1).toLocaleLowerCase().split("\n").map(function(a) {
            return a.trim();
          }));
        });
      };
      handleCreatedWords = function() {
        var dict, freq, lang, letter, letters, word, _i, _j, _len, _len1, _ref;
        for (lang in dicts) {
          dict = dicts[lang];
          freq = {};
          _ref = dict.words;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            word = _ref[_i];
            for (_j = 0, _len1 = word.length; _j < _len1; _j++) {
              letter = word[_j];
              if (freq[letter] == null) {
                freq[letter] = 0;
              }
              ++freq[letter];
            }
          }
          letters = Object.keys(freq);
          letters.sort(function(a, b) {
            return freq[b] - freq[a];
          });
          dict.letters = letters;
        }
        return typeof cb === "function" ? cb(dicts) : void 0;
      };
      genCallback = uu.whenDone(handleCreatedWords);
      _ref = ["en", "da"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lang = _ref[_i];
        dicts[lang] = {};
        readDict(lang, (function(lang, cb) {
          return function(words) {
            dicts[lang].words = words;
            return cb();
          };
        })(lang, genCallback()));
      }
      dicts.num = {
        words: randDict("0123456789")
      };
      return dicts.symb = {
        words: randDict(".,?'!/()&:;=+-_\"$@")
      };
    };
    return exercise = function(lang, n) {
      var exerciseList, letterNo;
      exerciseList = function(lang, n, letterNo) {
        var letter, letterDict, letters, reqLetter, _i, _len;
        letters = dicts[lang].letters.slice(0, n);
        letterDict = {};
        for (_i = 0, _len = letters.length; _i < _len; _i++) {
          letter = letters[_i];
          letterDict[letter] = true;
        }
        reqLetter = letters[letterNo];
        return dicts[lang].words.filter(function(word) {
          var hasReqLetter, _j, _len1;
          hasReqLetter = false;
          for (_j = 0, _len1 = word.length; _j < _len1; _j++) {
            letter = word[_j];
            if (!letterDict[letter]) {
              return false;
            }
            if (letter === reqLetter) {
              hasReqLetter = true;
            }
          }
          return hasReqLetter;
        });
      };
      letterNo = n;
      while (letterNo >= Math.min(n, dicts[lang].letters.length)) {
        letterNo = (n - Math.pow(Math.random(), 4) * n) | 0;
      }
      return uu.pick(exerciseList(lang, n, letterNo));
    };
  })();

  timings = [];

  touching = false;

  prev = void 0;

  registerTouch = function() {
    var state;
    prev = Date.now();
    state = function(doTouch) {
      var now;
      if (touching === doTouch) {
        return;
      }
      touching = doTouch;
      now = Date.now();
      timings.push(now - prev);
      console.log(touching, now - prev);
      return prev = now;
    };
    uu.domListen(document, "touchstart", function() {
      return state(true);
    });
    uu.domListen(document, "keydown", function() {
      return state(true);
    });
    uu.domListen(document, "mousedown", function() {
      return state(true);
    });
    uu.domListen(document, "touchend", function() {
      return state(false);
    });
    uu.domListen(document, "keyup", function() {
      return state(false);
    });
    return uu.domListen(document, "mouseup", function() {
      return state(false);
    });
  };

  parseMorse = function() {
    var i, min, result, _i, _ref;
    result = "";
    min = Math.max(30, Math.min.apply(null, timings));
    for (i = _i = 1, _ref = timings.length; _i <= _ref; i = _i += 2) {
      result += timings[i] > min * 2.5 ? "-" : ".";
      if (timings[i + 1] > min * 3.5) {
        result += " ";
      }
    }
    document.getElementById("morsecodes").innerHTML = result.split(" ").join(" &nbsp; ");
    return result;
  };

  uu.onComplete(function() {
    return setInterval(parseMorse, 1000);
  });

  renderMorse = function() {
    var ctx, w;
    ctx = document.getElementById("renderMorse").getContext("2d");
    w = ctx.canvas.width;
    renderMorse = function() {
      var i, len, state, x;
      i = timings.length - 1;
      state = touching;
      ctx.fillStyle = "#fff";
      ctx.fillRect(0, 0, w, 1);
      ctx.fillStyle = "#000";
      x = w;
      while (x >= 0 && i >= 0) {
        len = timings[i] * .04;
        x -= len;
        if (!state) {
          ctx.fillRect(x, 0, len, 1);
        }
        state = !state;
        --i;
      }
      return setTimeout(renderMorse, 100);
    };
    return renderMorse();
  };

  uu.onComplete(function() {
    document.body.innerHTML = jsonml2html.toString([
      "div", [
        "canvas#renderMorse", {
          width: 800,
          height: 1,
          style: {
            width: "80%",
            height: 20
          }
        }, ""
      ], ["div#morsecodes", ""]
    ]);
    renderMorse();
    registerTouch();
    return genDicts(function(dicts) {
      var i, j, lang, _i, _results;
      console.log(dicts);
      lang = "da";
      _results = [];
      for (i = _i = 2; _i <= 30; i = ++_i) {
        _results.push(console.log(dicts[lang].letters[i - 1], ((function() {
          var _j, _results1;
          _results1 = [];
          for (j = _j = 1; _j <= 20; j = ++_j) {
            _results1.push(exercise(lang, i));
          }
          return _results1;
        })()).join(" ")));
      }
      return _results;
    });
  });

}).call(this);
