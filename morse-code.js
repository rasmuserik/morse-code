// Generated by CoffeeScript 1.6.3
(function() {
  var ajaxLegacy, alphabet, exercise, genDicts, lang, level, onReady, ondash, ondot, onletter, onspace, quiz, use,
    __slice = [].slice;

  if (typeof isNodeJs === "undefined" || typeof runTest === "undefined") {
    (function() {
      var root;
      root = typeof global === "undefined" ? window : global;
      if (typeof isNodeJs === "undefined") {
        root.isNodeJs = typeof window === "undefined";
      }
      if (typeof isPhoneGap === "undefined") {
        root.isPhoneGap = typeof document.ondeviceready !== "undefined";
      }
      if (typeof runTest === "undefined") {
        return root.runTest = true;
      }
    })();
  }

  use = isNodeJs ? (function(module) {
    return require(module);
  }) : (function(module) {
    return window[module];
  });

  onReady = function(fn) {
    if (isNodeJs) {
      return process.nextTick(fn);
    } else {
      if (document.readystate !== "complete") {
        return fn();
      } else {
        return setTimeout((function() {
          return onReady(fn);
        }), 17);
      }
    }
  };

  uu.pick = function(arr) {
    return arr[Math.random() * arr.length | 0];
  };

  uu.domListen = function(elem, event, fn) {
    if (elem.addEventListener) {
      return elem.addEventListener(event, fn, false);
    } else {
      return elem.attachEvent("on" + event, fn);
    }
  };

  uu.onComplete = function(fn) {
    if (document.readystate !== "complete") {
      return fn();
    } else {
      return setTimeout((function() {
        return uu.onComplete(fn);
      }), 17);
    }
  };

  ajaxLegacy = false;

  (function() {
    var logData, logId, logSyncing, logUrl, logsBeforeSync, syncDelay;
    logId = Math.random();
    logUrl = "//ssl.solsort.com/api/log";
    logData = [];
    logSyncing = false;
    logsBeforeSync = 200;
    syncDelay = 400;
    uu.syncLog = function() {
      var e, logContent;
      if (!logSyncing) {
        try {
          logContent = JSON.stringify(logData);
        } catch (_error) {
          e = _error;
          logContent = "Error stringifying log";
        }
        logSyncing = logData;
        logData = [];
        return uu.ajax(logUrl, logContent, function(err, result) {
          setTimeout((function() {
            return logSyncing = false;
          }), syncDelay);
          if (err) {
            log("logsync error", err);
            return logData = logSyncing.concat(logData);
          } else {
            logData.push([+(new Date()), "log sync'ed", logId, logData.length]);
            if ((ajaxLegacy || runTest) && logData.length > 1) {
              return uu.syncLog();
            }
          }
        });
      }
    };
    uu.log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      logData.push([+(new Date())].concat(__slice.call(args)));
      if (logData.length > logsBeforeSync || ajaxLegacy || runTest) {
        uu.nextTick(uu.syncLog);
      }
      return args;
    };
    uu.onComplete(function() {
      uu.domListen(window, "error", function(err) {
        return uu.log("window.onerror ", String(err));
      });
      return uu.domListen(window, "beforeunload", function() {
        var e;
        uu.log("window.beforeunload");
        try {
          uu.ajax(logUrl, JSON.stringify(logData));
        } catch (_error) {
          e = _error;
          void 0;
        }
        return void 0;
      });
    });
    uu.log("starting", logId, window.performance);
    return uu.log("userAgent", navigator.userAgent);
  })();

  exercise = void 0;

  genDicts = void 0;

  alphabet = void 0;

  alphabet = {
    a: ".-",
    b: "-...",
    c: "-.-.",
    d: "-..",
    e: ".",
    f: "..-.",
    g: "--.",
    i: "..",
    h: "....",
    j: ".---",
    k: "-.-",
    l: ".-..",
    m: "--",
    n: "-.",
    o: "---",
    p: ".--.",
    q: "--.-",
    r: ".-.",
    s: "...",
    t: "-",
    u: "..-",
    v: "...-",
    w: ".--",
    x: "-..-",
    y: "-.--",
    z: "--..",
    "0": "-----",
    "1": ".----",
    "2": "..---",
    "3": "...--",
    "4": "....-",
    "5": ".....",
    "6": "-....",
    "7": "--...",
    "8": "---..",
    "9": "----.",
    ".": ".-.-.-",
    ",": "--..--",
    "?": "..--..",
    "'": ".----.",
    "!": ".-.---",
    "/": "-..-.",
    "(": "-.--.",
    ")": "-.--.-",
    "&": ".-...",
    ":": "---...",
    ";": "-.-.-.",
    "=": "-...-",
    "+": ".-.-.",
    "-": "-....-",
    "_": "..--.-",
    '"': ".-..-.",
    "$": "...-..-",
    "@": ".--.-.",
    "æ": ".-.-",
    "ä": ".-.-",
    "ą": ".-.-",
    "à": ".--.-",
    "à": ".--.-",
    "ç": "-.-..",
    "ĉ": "-.-..",
    "ć": "-.-..",
    "š": "----",
    "ĥ": "----",
    "ð": "..--.",
    "ś": "...-...",
    "ł": ".-..-",
    "è": ".-..-",
    "é": "..-..",
    "đ": "..-..",
    "ę": "..-..",
    "ĝ": "--.-.",
    "ĵ": ".---.",
    "ź": "--..-.",
    "ñ": "--.--",
    "ń": "--.--",
    "ø": "---.",
    "ö": "---.",
    "ó": "---.",
    "ŝ": "...-.",
    "þ": ".--..",
    "ü": "..--",
    "ŭ": "..--",
    "ż": "--..-"
  };

  (function() {
    var dicts, randDict;
    dicts = {};
    randDict = function(symbs) {
      var i, j, word, _i, _j, _ref, _results;
      _results = [];
      for (i = _i = 0; _i <= 999; i = ++_i) {
        word = "";
        for (j = _j = 0, _ref = Math.random() * 4 + 1; 0 <= _ref ? _j <= _ref : _j >= _ref; j = 0 <= _ref ? ++_j : --_j) {
          word += uu.pick(symbs);
        }
        _results.push(word);
      }
      return _results;
    };
    genDicts = function(cb) {
      var genCallback, handleCreatedWords, lang, readDict, _i, _len, _ref;
      readDict = function(lang, fn) {
        return uu.ajax("" + lang + "words.txt", void 0, function(err, result) {
          if (err) {
            throw err;
          }
          return fn(result.slice(0, -1).toLocaleLowerCase().split("\n").map(function(a) {
            return a.trim();
          }));
        });
      };
      handleCreatedWords = function() {
        var dict, freq, lang, letter, letters, word, _i, _j, _len, _len1, _ref;
        for (lang in dicts) {
          dict = dicts[lang];
          freq = {};
          _ref = dict.words;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            word = _ref[_i];
            for (_j = 0, _len1 = word.length; _j < _len1; _j++) {
              letter = word[_j];
              if (freq[letter] == null) {
                freq[letter] = 0;
              }
              ++freq[letter];
            }
          }
          letters = Object.keys(freq);
          letters.sort(function(a, b) {
            return freq[b] - freq[a];
          });
          dict.letters = letters;
        }
        return typeof cb === "function" ? cb(dicts) : void 0;
      };
      genCallback = uu.whenDone(handleCreatedWords);
      _ref = ["en", "da"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lang = _ref[_i];
        dicts[lang] = {};
        readDict(lang, (function(lang, cb) {
          return function(words) {
            dicts[lang].words = words;
            return cb();
          };
        })(lang, genCallback()));
      }
      dicts.num = {
        words: randDict("0123456789")
      };
      return dicts.symb = {
        words: randDict(".,?'!/()&:;=+-_\"$@")
      };
    };
    return exercise = function(lang, n) {
      var exerciseList, letterNo;
      uu.log("morse exercise", lang, n);
      n = n | 0;
      exerciseList = function(lang, n, letterNo) {
        var letter, letterDict, letters, reqLetter, _i, _len;
        letters = dicts[lang].letters.slice(0, n);
        letterDict = {};
        for (_i = 0, _len = letters.length; _i < _len; _i++) {
          letter = letters[_i];
          letterDict[letter] = true;
        }
        reqLetter = letters[letterNo];
        return dicts[lang].words.filter(function(word) {
          var hasReqLetter, _j, _len1;
          hasReqLetter = false;
          for (_j = 0, _len1 = word.length; _j < _len1; _j++) {
            letter = word[_j];
            if (!letterDict[letter]) {
              return false;
            }
            if (letter === reqLetter) {
              hasReqLetter = true;
            }
          }
          return hasReqLetter;
        });
      };
      letterNo = n;
      while (letterNo >= Math.min(n, dicts[lang].letters.length)) {
        letterNo = (n - Math.pow(Math.random(), 4) * n) | 0;
      }
      return uu.pick(exerciseList(lang, n, letterNo));
    };
  })();

  ondot = ondash = onletter = onspace = void 0;

  uu.onComplete(function() {
    var code, dashTime, letterTime, spaceTime, time, touchEnd, touchStart;
    dashTime = 200;
    letterTime = 330;
    spaceTime = 800;
    time = Date.now();
    code = "";
    ondot = function() {
      return code += ".";
    };
    ondash = function() {
      return code += "-";
    };
    onletter = function() {
      return code += " ";
    };
    onspace = function() {
      return code = "";
    };
    touchStart = function(e) {
      var now;
      e.preventDefault();
      now = time = Date.now();
      uu.log("morsestart", now, dashTime);
      setTimeout((function() {
        if (time === now) {
          return ondash();
        } else {
          return ondot();
        }
      }), dashTime);
      return false;
    };
    touchEnd = function(e) {
      var now;
      e.preventDefault();
      now = time = Date.now();
      uu.log("morseend", now, letterTime, spaceTime);
      setTimeout((function() {
        if (time === now) {
          return onletter();
        }
      }), letterTime);
      setTimeout((function() {
        if (time === now) {
          return onspace();
        }
      }), spaceTime);
      return false;
    };
    uu.domListen(document, "keydown", touchStart);
    uu.domListen(document, "keyup", touchEnd);
    if (typeof document.ontouchstart !== "undefined") {
      uu.domListen(document, "touchstart", touchStart);
      return uu.domListen(document, "touchend", touchEnd);
    } else {
      uu.domListen(document, "mousedown", touchStart);
      return uu.domListen(document, "mouseup", touchEnd);
    }
  });

  /*
  #{{{2 touch timing
  timings = []
  touching = false
  prev = undefined
  registerTouch = ->
    prev = Date.now()
    state = (doTouch) ->
      return if touching == doTouch
      touching = doTouch
      now = Date.now()
      timings.push now - prev
      console.log touching, now - prev
      prev = now
  
    uu.domListen document, "touchstart", -> state true
    uu.domListen document, "keydown", -> state true
    uu.domListen document, "mousedown", -> state true
    uu.domListen document, "touchend", -> state false
    uu.domListen document, "keyup", -> state false
    uu.domListen document, "mouseup", -> state false
  
  #{{{2 interprete as morse characters
  
  parseMorse = ->
    result = ""
    min = Math.max 30, Math.min.apply null, timings
    for i in [1..timings.length] by 2
      result += if timings[i] > min * 2.5 then "-" else "."
      result += " " if timings[i+1] > min * 3.5
    document.getElementById("morsecodes").innerHTML = result.split(" ").join(" &nbsp; ")
    return result
  
  uu.onComplete ->
    setInterval parseMorse, 1000
  
  #{{{2 visualise morse code
  renderMorse = ->
    ctx = document.getElementById("renderMorse").getContext("2d")
    w = ctx.canvas.width
    renderMorse = ->
      i = timings.length - 1
      state = touching
      ctx.fillStyle = "#fff"
      ctx.fillRect 0, 0, w, 1
      ctx.fillStyle = "#000"
  
      x = w
      while x >= 0 and i >=0
        len = timings[i] * .04
        x -= len
        ctx.fillRect x, 0, len, 1 if !state
        state = !state
        --i
      setTimeout renderMorse, 100
    renderMorse()
  */


  level = 1;

  lang = "en";

  quiz = function() {
    var addEntry, entry, entryLetters, resetEntry, tries, unit, word;
    word = exercise(lang, level);
    uu.log("morsequiz", level, word);
    tries = 0;
    unit = Math.min(window.innerWidth, window.innerHeight) / 10;
    document.body.innerHTML = jsonml2html.toString([
      "div", {
        style: {
          fontFamily: "sans-serif",
          textAlign: "center",
          fontSize: unit
        }
      }, [
        "div", {
          style: {
            fontSize: unit * .8,
            margin: unit * .5
          }
        }, "level: ", level
      ], [
        "div", {
          style: {
            fontSize: unit * 2
          }
        }, word
      ], [
        "div#entry", {
          style: {
            fontSize: unit * 1.5
          }
        }, ""
      ], ["div#entryLetters", ""]
    ]);
    tries = 0;
    entry = document.getElementById("entry");
    entryLetters = document.getElementById("entryLetters");
    resetEntry = false;
    addEntry = function(str) {
      if (resetEntry) {
        entry.innerHTML = "";
        resetEntry = false;
      }
      return entry.innerHTML += str;
    };
    ondot = function() {
      return addEntry(".");
    };
    ondash = function() {
      return addEntry("-");
    };
    onletter = function() {
      var letters;
      letters = String(entry.innerHTML).split(" ").map(function(morse) {
        var code, symb;
        for (symb in alphabet) {
          code = alphabet[symb];
          if (morse === code) {
            return symb;
          }
        }
        return morse;
      });
      entryLetters.innerHTML = letters.join("");
      return addEntry(" ");
    };
    return onspace = function() {
      ++tries;
      if (String(entryLetters.innerHTML) === word) {
        level += Math.max(2 - tries, -1);
        level = Math.max(level, 1);
        return uu.nextTick(quiz);
      }
      entryLetters.innerHTML = jsonml2html.toString([
        "div", {
          style: {
            color: "#800",
            fontSize: unit * .5
          }
        }, ["div", entry.innerHTML], ["div", entryLetters.innerHTML]
      ]);
      entry.innerHTML = jsonml2html.toString([
        "div", {
          style: {
            color: "#040"
          }
        }, word.split("").map(function(a) {
          return alphabet[a];
        }).join(" ")
      ]);
      return resetEntry = true;
    };
  };

  uu.onComplete(function() {
    document.body.innerHTML = jsonml2html.toString([
      "div", [
        "canvas#renderMorse", {
          width: 800,
          height: 1,
          style: {
            width: "80%",
            height: 20
          }
        }, ""
      ], ["div#morsecodes", ""]
    ]);
    return genDicts(function(dicts) {
      return quiz();
    });
  });

}).call(this);
